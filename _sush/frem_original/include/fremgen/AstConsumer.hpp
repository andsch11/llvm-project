
#ifndef ASTCONSUMER_HPP
#define ASTCONSUMER_HPP

#include "AstVisitor.hpp"

#ifdef _MSC_VER
#pragma warning(push, 0)
#endif

#include <clang/AST/ASTConsumer.h>
#include <clang/Frontend/CompilerInstance.h>
#include <llvm/ADT/StringRef.h>

#ifdef _MSC_VER
#pragma warning(pop)
#endif

#include <string>


/// The AST consumer reacts to events generated by the Clang parser during the
/// AST construction. It has mainly two purposes:
/// 1. It installs callbacks to react on macros such as `FREM_RPC`. These callbacks
///    generate source code on the fly, which ends up in the AST and from which the
///    interface descriptions are generated.
/// 2. When Clang has parsed a translation unit, it creates and AST visitor to
///    scan the C++ AST for interface descriptions.
/// Its main action is to visit the whole AST once a translation unit has been parsed.
class AstConsumer : public clang::ASTConsumer
{
public:
    /// Creates an AST consumer.
    ///
    /// The current `compilerInstance` is used to install macro callbacks. `inFile` is
    /// the name of the currently parsed C++ file.
    // TODO: document `writeRpcs`
    /// The parsed interface description is stored into `result`.
    AstConsumer(clang::CompilerInstance& compilerInstance,
                llvm::StringRef inFile,
                bool writeRpcs,
                ParseResult& result);

    virtual void Initialize(clang::ASTContext& context) override;

    virtual void HandleTranslationUnit(clang::ASTContext& context) override;

private:
    // Where the interface description will be stored.
    ParseResult& m_parseResult;
    clang::CompilerInstance& m_ci;
    // The name of the currently parsed file.
    std::string m_inFile;
    // The AST visitor, which will scan the C++ AST for interface descriptions.
    AstVisitor m_visitor;
};

#endif // ASTCONSUMER_HPP
